// Generated by Apple Swift version 4.1 effective-3.3 (swiftlang-902.0.48 clang-902.0.37.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import Foundation;
@import CoreGraphics;
@import QuartzCore;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SpreadsheetView",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC15SpreadsheetView4Cell")
@interface Cell : UIView
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
@property (nonatomic, strong) UIView * _Nullable backgroundView;
@property (nonatomic, strong) UIView * _Nullable selectedBackgroundView;
@property (nonatomic) BOOL isHighlighted;
@property (nonatomic) BOOL isSelected;
@property (nonatomic) BOOL hasBorder;
@property (nonatomic, copy) NSString * _Nullable reuseIdentifier;
@property (nonatomic, copy) NSIndexPath * _Null_unspecified indexPath;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setup;
- (void)prepareForReuse;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end


SWIFT_CLASS("_TtC15SpreadsheetView9BlankCell")
@interface BlankCell : Cell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC15SpreadsheetView6Border")
@interface Border : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end




@class UIColor;
@protocol CAAction;

SWIFT_CLASS("_TtC15SpreadsheetView8Gridline")
@interface Gridline : CALayer
@property (nonatomic, strong) UIColor * _Nonnull color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (id <CAAction> _Nullable)actionForKey:(NSString * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
@end

@class UITouch;
@class UIEvent;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC15SpreadsheetView10ScrollView")
@interface ScrollView : UIScrollView <UIGestureRecognizerDelegate>
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull columnRecords;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull rowRecords;
@property (nonatomic, copy) void (^ _Nullable touchesBegan)(NSSet<UITouch *> * _Nonnull, UIEvent * _Nullable);
@property (nonatomic, copy) void (^ _Nullable touchesEnded)(NSSet<UITouch *> * _Nonnull, UIEvent * _Nullable);
@property (nonatomic, copy) void (^ _Nullable touchesCancelled)(NSSet<UITouch *> * _Nonnull, UIEvent * _Nullable);
@property (nonatomic, readonly) BOOL hasDisplayedContent;
- (void)resetReusableObjects;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)touchesShouldBegin:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event inContentView:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UINib;

SWIFT_CLASS("_TtC15SpreadsheetView15SpreadsheetView")
@interface SpreadsheetView : UIView
/// The horizontal and vertical spacing between cells.
/// note:
/// The default spacing is <code>(1.0, 1.0)</code>. Negative values are not supported.
@property (nonatomic) CGSize intercellSpacing;
/// A Boolean value that indicates whether users can select cells in the spreadsheet view.
/// note:
/// If the value of this property is <code>true</code> (the default), users can select cells.
/// If you want more fine-grained control over the selection of cells,
/// you must provide a delegate object and implement the appropriate methods of the <code>SpreadsheetViewDelegate</code> protocol.
/// seealso:
/// <code>allowsMultipleSelection</code>
@property (nonatomic) BOOL allowsSelection;
/// A Boolean value that determines whether users can select more than one cell in the spreadsheet view.
/// note:
/// This property controls whether multiple cells can be selected simultaneously.
/// The default value of this property is <code>false</code>.
/// When the value of this property is true, tapping a cell adds it to the current selection (assuming the delegate permits the cell to be selected).
/// Tapping the cell again removes it from the selection.
/// seealso:
/// <code>allowsSelection</code>
@property (nonatomic) BOOL allowsMultipleSelection;
/// A Boolean value that controls whether the vertical scroll indicator is visible.
/// The default value is <code>true</code>. The indicator is visible while tracking is underway and fades out after tracking.
@property (nonatomic) BOOL showsVerticalScrollIndicator;
/// A Boolean value that controls whether the horizontal scroll indicator is visible.
/// The default value is <code>true</code>. The indicator is visible while tracking is underway and fades out after tracking.
@property (nonatomic) BOOL showsHorizontalScrollIndicator;
/// A Boolean value that controls whether the scroll-to-top gesture is enabled.
/// note:
/// The scroll-to-top gesture is a tap on the status bar. When a user makes this gesture,
/// the system asks the scroll view closest to the status bar to scroll to the top.
/// If that scroll view has <code>scrollsToTop</code> set to <code>false</code>, its delegate returns false from <code>scrollViewShouldScrollToTop(_:)</code>,
/// or the content is already at the top, nothing happens.
/// After the scroll view scrolls to the top of the content view, it sends the delegate a <code>scrollViewDidScrollToTop(_:)</code> message.
/// The default value of scrollsToTop is <code>true</code>.
/// On iPhone, the scroll-to-top gesture has no effect if there is more than one scroll view on-screen that has <code>scrollsToTop</code> set to <code>true</code>.
@property (nonatomic) BOOL scrollsToTop;
@property (nonatomic) CGPoint centerOffset;
/// The view that provides the background appearance.
/// note:
/// The view (if any) in this property is positioned underneath all of the other content and sized automatically to fill the entire bounds of the spreadsheet view.
/// The background view does not scroll with the spreadsheet view’s other content. The spreadsheet view maintains a strong reference to the background view object.
/// This property is nil by default, which displays the background color of the spreadsheet view.
@property (nonatomic, strong) UIView * _Nullable backgroundView;
- (void)safeAreaInsetsDidChange SWIFT_AVAILABILITY(ios,introduced=11.0);
/// Returns an array of visible cells currently displayed by the spreadsheet view.
/// note:
/// This method returns the complete list of visible cells displayed by the collection view.
///
/// returns:
/// An array of <code>Cell</code> objects. If no cells are visible, this method returns an empty array.
@property (nonatomic, readonly, copy) NSArray<Cell *> * _Nonnull visibleCells;
/// An array of the visible items in the collection view.
/// note:
/// The value of this property is a sorted array of IndexPath objects, each of which corresponds to a visible cell in the spreadsheet view.
/// If there are no visible items, the value of this property is an empty array.
/// seealso:
/// <code>visibleCells</code>
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nonnull indexPathsForVisibleItems;
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable indexPathForSelectedItem;
/// The index paths for the selected items.
/// note:
/// The value of this property is an array of IndexPath objects, each of which corresponds to a single selected item.
/// If there are no selected items, the value of this property is nil.
@property (nonatomic, readonly, copy) NSArray<NSIndexPath *> * _Nonnull indexPathsForSelectedItems;
/// A Boolean value that determines whether scrolling is disabled in a particular direction.
/// note:
/// If this property is <code>false</code>, scrolling is permitted in both horizontal and vertical directions.
/// If this property is <code>true</code> and the user begins dragging in one general direction (horizontally or vertically), the scroll view disables scrolling in the other direction.
/// If the drag direction is diagonal, then scrolling will not be locked and the user can drag in any direction until the drag completes.
/// The default value is <code>false</code>
@property (nonatomic) BOOL isDirectionalLockEnabled;
/// A Boolean value that controls whether the scroll view bounces past the edge of content and back again.
/// note:
/// If the value of this property is <code>true</code>, the scroll view bounces when it encounters a boundary of the content.
/// Bouncing visually indicates that scrolling has reached an edge of the content.
/// If the value is <code>false</code>, scrolling stops immediately at the content boundary without bouncing.
/// The default value is <code>true</code>.
/// seealso:
/// <code>alwaysBounceHorizontal</code>, <code>alwaysBounceVertical</code>
@property (nonatomic) BOOL bounces;
/// A Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.
/// note:
/// If this property is set to true and <code>bounces</code> is <code>true</code>, vertical dragging is allowed even if the content is smaller than the bounds of the scroll view.
/// The default value is <code>false</code>.
/// seealso:
/// <code>alwaysBounceHorizontal</code>
@property (nonatomic) BOOL alwaysBounceVertical;
/// A Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view.
/// note:
/// If this property is set to <code>true</code> and <code>bounces</code> is <code>true</code>, horizontal dragging is allowed even if the content is smaller than the bounds of the scroll view.
/// The default value is <code>false</code>.
/// seealso:
/// <code>alwaysBounceVertical</code>
@property (nonatomic) BOOL alwaysBounceHorizontal;
/// A Boolean value that determines wheather the row header always sticks to the top.
/// note:
/// <code>bounces</code> has to be <code>true</code> and there has to be at least one <code>frozenRow</code>.
/// The default value is <code>false</code>.
/// seealso:
/// <code>stickyColumnHeader</code>
@property (nonatomic) BOOL stickyRowHeader;
/// A Boolean value that determines wheather the column header always sticks to the top.
/// note:
/// <code>bounces</code> has to be <code>true</code> and there has to be at least one <code>frozenColumn</code>.
/// The default value is <code>false</code>.
/// seealso:
/// <code>stickyRowHeader</code>
@property (nonatomic) BOOL stickyColumnHeader;
/// A Boolean value that determines whether paging is enabled for the scroll view.
/// note:
/// If the value of this property is <code>true</code>, the scroll view stops on multiples of the scroll view’s bounds when the user scrolls.
/// The default value is false.
@property (nonatomic) BOOL isPagingEnabled;
/// A Boolean value that determines whether scrolling is enabled.
/// note:
/// If the value of this property is <code>true</code>, scrolling is enabled, and if it is <code>false</code>, scrolling is disabled. The default is <code>true</code>.
/// When scrolling is disabled, the scroll view does not accept touch events; it forwards them up the responder chain.
@property (nonatomic) BOOL isScrollEnabled;
/// The style of the scroll indicators.
/// note:
/// The default style is <code>default</code>. See <code>UIScrollViewIndicatorStyle</code> for descriptions of these constants.
@property (nonatomic) UIScrollViewIndicatorStyle indicatorStyle;
/// A floating-point value that determines the rate of deceleration after the user lifts their finger.
/// note:
/// Your application can use the <code>UIScrollViewDecelerationRateNormal</code> and UIScrollViewDecelerationRateFast` constants as reference points for reasonable deceleration rates.
@property (nonatomic) CGFloat decelerationRate;
@property (nonatomic, readonly) NSInteger numberOfColumns;
@property (nonatomic, readonly) NSInteger numberOfRows;
@property (nonatomic, readonly) NSInteger frozenColumns;
@property (nonatomic, readonly) NSInteger frozenRows;
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollView;
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull rootView;
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull overlayView;
@property (nonatomic, readonly, strong) ScrollView * _Nonnull columnHeaderView;
@property (nonatomic, readonly, strong) ScrollView * _Nonnull rowHeaderView;
@property (nonatomic, readonly, strong) ScrollView * _Nonnull cornerView;
@property (nonatomic, readonly, strong) ScrollView * _Nonnull tableView;
@property (nonatomic, readonly, copy) NSString * _Nonnull blankCellReuseIdentifier;
@property (nonatomic, copy) NSSet<NSIndexPath *> * _Nonnull highlightedIndexPaths;
@property (nonatomic, copy) NSSet<NSIndexPath *> * _Nonnull selectedIndexPaths;
@property (nonatomic, copy) NSIndexPath * _Nullable pendingSelectionIndexPath;
@property (nonatomic, strong) UITouch * _Nullable currentTouch;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)registerClass:(SWIFT_METATYPE(Cell) _Nonnull)cellClass forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
- (void)registerNib:(UINib * _Nonnull)nib forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
- (void)reloadData;
- (void)reloadDataIfNeeded;
- (Cell * _Nonnull)dequeueReusableCellWithReuseIdentifier:(NSString * _Nonnull)identifier for:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)deselectItemAt:(NSIndexPath * _Nonnull)indexPath animated:(BOOL)animated;
- (NSIndexPath * _Nullable)indexPathForItemAt:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
- (Cell * _Nullable)cellForItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<Cell *> * _Nonnull)cellsForItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGRect)rectForItemAt:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
- (UIView * _Nullable)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets SWIFT_WARN_UNUSED_RESULT;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidChangeAdjustedContentInset:(UIScrollView * _Nonnull)scrollView SWIFT_AVAILABILITY(ios,introduced=11.0);
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
- (void)insertSubview:(UIView * _Nonnull)view atIndex:(NSInteger)index;
- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;
- (void)addSubview:(UIView * _Nonnull)view;
- (void)insertSubview:(UIView * _Nonnull)view belowSubview:(UIView * _Nonnull)siblingSubview;
- (void)insertSubview:(UIView * _Nonnull)view aboveSubview:(UIView * _Nonnull)siblingSubview;
- (void)bringSubviewToFront:(UIView * _Nonnull)view;
- (void)sendSubviewToBack:(UIView * _Nonnull)view;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
- (void)scrollToHorizontalCenter;
- (void)scrollToVerticalCenter;
- (void)recenterHorizontallyIfNecessary;
- (void)recenterVerticallyIfNecessary;
- (NSInteger)determineHorizontalCircularScrollScalingFactor SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)determineVerticalCircularScrollScalingFactor SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)calculateCenterOffset SWIFT_WARN_UNUSED_RESULT;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches :(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches :(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches :(UIEvent * _Nullable)event;
- (void)highlightItemsOn:(NSSet<UITouch *> * _Nonnull)touches;
- (void)restorePreviousSelection;
- (void)clearCurrentTouch;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
- (void)layoutSubviews;
- (void)resetContentSizeOf:(ScrollView * _Nonnull)scrollView;
- (void)resetScrollViewFrame;
- (void)resetOverlayViewContentSize:(UIEdgeInsets)contentInset;
- (void)resetScrollViewArrangement;
- (NSInteger)findIndexIn:(NSArray<NSNumber *> * _Nonnull)records for:(CGFloat)offset SWIFT_WARN_UNUSED_RESULT;
@end


@interface SpreadsheetView (SWIFT_EXTENSION(SpreadsheetView))
@property (nonatomic) CGPoint contentOffset;
@property (nonatomic) UIEdgeInsets scrollIndicatorInsets;
@property (nonatomic, readonly) CGSize contentSize;
@property (nonatomic) UIEdgeInsets contentInset;
@property (nonatomic, readonly) UIEdgeInsets adjustedContentInset;
- (void)flashScrollIndicators;
- (void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated;
- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated;
- (void)_notifyDidScroll;
- (BOOL)isKindOfClass:(Class _Nonnull)aClass SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)forwardingTargetForSelector:(SEL _Null_unspecified)aSelector SWIFT_WARN_UNUSED_RESULT;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
